{"ast":null,"code":"import API from \"./api\";\nconst stationService = {\n  async getAll(params = {}) {\n    const response = await API.get(\"/stations\", {\n      params\n    });\n    return response.data;\n  },\n  async getById(id) {\n    const response = await API.get(`/stations/${id}`);\n    return response.data;\n  },\n  async getStationReports(id, hours = 24) {\n    const response = await API.get(`/crowd-reports/station/${id}`, {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  },\n  async createCrowdReport(id, crowdLevel, description) {\n    const payload = {\n      station_id: Number(id),\n      crowd_level: crowdLevel,\n      description\n    };\n    const response = await API.post(\"/crowd-reports\", payload);\n    return response.data;\n  },\n  async getHourlyPredictions(id, hours = 24) {\n    const response = await API.get(`/predictions/hourly/${id}`, {\n      params: {\n        hours\n      }\n    });\n    return response.data;\n  },\n  async getStationPredictions(id, limit = 10) {\n    const response = await API.get(`/predictions/station/${id}`, {\n      params: {\n        limit\n      }\n    });\n    return response.data;\n  },\n  async requestPrediction(stationId, hoursAhead = 1) {\n    const response = await API.post(\"/predictions/predict\", {\n      station_id: Number(stationId),\n      hours_ahead: hoursAhead\n    });\n    return response.data;\n  },\n  async getStationAnalytics(id, days = 7) {\n    const response = await API.get(`/analytics/station/${id}`, {\n      params: {\n        days\n      }\n    });\n    return response.data;\n  },\n  async getSystemOverview() {\n    const response = await API.get(\"/analytics/overview\");\n    return response.data;\n  }\n};\nexport { stationService };\nexport default stationService;","map":{"version":3,"names":["API","stationService","getAll","params","response","get","data","getById","id","getStationReports","hours","createCrowdReport","crowdLevel","description","payload","station_id","Number","crowd_level","post","getHourlyPredictions","getStationPredictions","limit","requestPrediction","stationId","hoursAhead","hours_ahead","getStationAnalytics","days","getSystemOverview"],"sources":["C:/suro/Crowd_prediction/Crowd_prediction/Frontend/src/services/stations.js"],"sourcesContent":["import API from \"./api\";\r\n\r\nconst stationService = {\r\n  async getAll(params = {}) {\r\n    const response = await API.get(\"/stations\", { params });\r\n    return response.data;\r\n  },\r\n\r\n  async getById(id) {\r\n    const response = await API.get(`/stations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  async getStationReports(id, hours = 24) {\r\n    const response = await API.get(`/crowd-reports/station/${id}`, {\r\n      params: { hours },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async createCrowdReport(id, crowdLevel, description) {\r\n    const payload = {\r\n      station_id: Number(id),\r\n      crowd_level: crowdLevel,\r\n      description,\r\n    };\r\n    const response = await API.post(\"/crowd-reports\", payload);\r\n    return response.data;\r\n  },\r\n\r\n  async getHourlyPredictions(id, hours = 24) {\r\n    const response = await API.get(`/predictions/hourly/${id}`, {\r\n      params: { hours },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async getStationPredictions(id, limit = 10) {\r\n    const response = await API.get(`/predictions/station/${id}`, {\r\n      params: { limit },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async requestPrediction(stationId, hoursAhead = 1) {\r\n    const response = await API.post(\"/predictions/predict\", {\r\n      station_id: Number(stationId),\r\n      hours_ahead: hoursAhead,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async getStationAnalytics(id, days = 7) {\r\n    const response = await API.get(`/analytics/station/${id}`, {\r\n      params: { days },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async getSystemOverview() {\r\n    const response = await API.get(\"/analytics/overview\");\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport { stationService };\r\nexport default stationService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,GAAG;EACrB,MAAMC,MAAMA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACxB,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,WAAW,EAAE;MAAEF;IAAO,CAAC,CAAC;IACvD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,OAAOA,CAACC,EAAE,EAAE;IAChB,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;IACjD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMG,iBAAiBA,CAACD,EAAE,EAAEE,KAAK,GAAG,EAAE,EAAE;IACtC,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,0BAA0BG,EAAE,EAAE,EAAE;MAC7DL,MAAM,EAAE;QAAEO;MAAM;IAClB,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMK,iBAAiBA,CAACH,EAAE,EAAEI,UAAU,EAAEC,WAAW,EAAE;IACnD,MAAMC,OAAO,GAAG;MACdC,UAAU,EAAEC,MAAM,CAACR,EAAE,CAAC;MACtBS,WAAW,EAAEL,UAAU;MACvBC;IACF,CAAC;IACD,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,IAAI,CAAC,gBAAgB,EAAEJ,OAAO,CAAC;IAC1D,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMa,oBAAoBA,CAACX,EAAE,EAAEE,KAAK,GAAG,EAAE,EAAE;IACzC,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,uBAAuBG,EAAE,EAAE,EAAE;MAC1DL,MAAM,EAAE;QAAEO;MAAM;IAClB,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMc,qBAAqBA,CAACZ,EAAE,EAAEa,KAAK,GAAG,EAAE,EAAE;IAC1C,MAAMjB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,wBAAwBG,EAAE,EAAE,EAAE;MAC3DL,MAAM,EAAE;QAAEkB;MAAM;IAClB,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMgB,iBAAiBA,CAACC,SAAS,EAAEC,UAAU,GAAG,CAAC,EAAE;IACjD,MAAMpB,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,IAAI,CAAC,sBAAsB,EAAE;MACtDH,UAAU,EAAEC,MAAM,CAACO,SAAS,CAAC;MAC7BE,WAAW,EAAED;IACf,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMoB,mBAAmBA,CAAClB,EAAE,EAAEmB,IAAI,GAAG,CAAC,EAAE;IACtC,MAAMvB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,sBAAsBG,EAAE,EAAE,EAAE;MACzDL,MAAM,EAAE;QAAEwB;MAAK;IACjB,CAAC,CAAC;IACF,OAAOvB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMsB,iBAAiBA,CAAA,EAAG;IACxB,MAAMxB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,qBAAqB,CAAC;IACrD,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,SAASL,cAAc;AACvB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}