{"ast":null,"code":"var _jsxFileName = \"C:\\\\suro\\\\Crowd_prediction\\\\Frontend\\\\src\\\\components\\\\Stations\\\\StationList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getStations } from \"../../services/stations\";\nimport { CROWD_COLORS, CROWD_LEVELS } from \"../../utils/constants\";\nimport \"./Stations.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StationList = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const data = await getStations();\n        setStations(data);\n      } catch (error) {\n        console.error(\"Failed to fetch stations\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchStations();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading stations...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stations\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stations-grid\",\n      children: stations.map(station => {\n        const level = station.current_crowd_level || 3;\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: `/stations/${station.id}`,\n          className: \"station-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: station.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: CROWD_COLORS[level]\n            },\n            children: [CROWD_LEVELS[level], \" (\", level, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Type: \", station.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)]\n        }, station.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(StationList, \"t1CtI3w1Gfzm0G8ji+fABI0wNNI=\");\n_c = StationList;\nexport default StationList;\nvar _c;\n$RefreshReg$(_c, \"StationList\");","map":{"version":3,"names":["React","useEffect","useState","Link","getStations","CROWD_COLORS","CROWD_LEVELS","jsxDEV","_jsxDEV","StationList","_s","stations","setStations","loading","setLoading","fetchStations","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","station","level","current_crowd_level","to","id","name","style","color","type","_c","$RefreshReg$"],"sources":["C:/suro/Crowd_prediction/Frontend/src/components/Stations/StationList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getStations } from \"../../services/stations\";\r\nimport { CROWD_COLORS, CROWD_LEVELS } from \"../../utils/constants\";\r\nimport \"./Stations.css\";\r\n\r\nconst StationList = () => {\r\n  const [stations, setStations] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchStations = async () => {\r\n      try {\r\n        const data = await getStations();\r\n        setStations(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch stations\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchStations();\r\n  }, []);\r\n\r\n  if (loading) return <div className=\"loading\">Loading stations...</div>;\r\n\r\n  return (\r\n    <div className=\"stations\">\r\n      <h2>Stations</h2>\r\n      <div className=\"stations-grid\">\r\n        {stations.map((station) => {\r\n          const level = station.current_crowd_level || 3;\r\n          return (\r\n            <Link\r\n              to={`/stations/${station.id}`}\r\n              key={station.id}\r\n              className=\"station-card\"\r\n            >\r\n              <h3>{station.name}</h3>\r\n              <p style={{ color: CROWD_COLORS[level] }}>\r\n                {CROWD_LEVELS[level]} ({level})\r\n              </p>\r\n              <small>Type: {station.type}</small>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,YAAY,EAAEC,YAAY,QAAQ,uBAAuB;AAClE,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMZ,WAAW,CAAC,CAAC;QAChCQ,WAAW,CAACI,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,SAAS;QACRH,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE,oBAAOL,OAAA;IAAKW,SAAS,EAAC,SAAS;IAAAC,QAAA,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEtE,oBACEhB,OAAA;IAAKW,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBZ,OAAA;MAAAY,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBhB,OAAA;MAAKW,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3BT,QAAQ,CAACc,GAAG,CAAEC,OAAO,IAAK;QACzB,MAAMC,KAAK,GAAGD,OAAO,CAACE,mBAAmB,IAAI,CAAC;QAC9C,oBACEpB,OAAA,CAACL,IAAI;UACH0B,EAAE,EAAE,aAAaH,OAAO,CAACI,EAAE,EAAG;UAE9BX,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAExBZ,OAAA;YAAAY,QAAA,EAAKM,OAAO,CAACK;UAAI;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvBhB,OAAA;YAAGwB,KAAK,EAAE;cAAEC,KAAK,EAAE5B,YAAY,CAACsB,KAAK;YAAE,CAAE;YAAAP,QAAA,GACtCd,YAAY,CAACqB,KAAK,CAAC,EAAC,IAAE,EAACA,KAAK,EAAC,GAChC;UAAA;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACJhB,OAAA;YAAAY,QAAA,GAAO,QAAM,EAACM,OAAO,CAACQ,IAAI;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAP9BE,OAAO,CAACI,EAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQX,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CA3CID,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AA6CjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}