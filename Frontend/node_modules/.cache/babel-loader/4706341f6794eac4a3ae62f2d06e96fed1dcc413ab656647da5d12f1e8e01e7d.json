{"ast":null,"code":"var _jsxFileName = \"C:\\\\suro\\\\Crowd_prediction\\\\Frontend\\\\src\\\\components\\\\Analytics\\\\TreandChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { getSystemAnalytics } from \"../../services/stations\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst TrendChart = () => {\n  _s();\n  const [trendData, setTrendData] = useState(null);\n  useEffect(() => {\n    const fetchAnalytics = async () => {\n      try {\n        const data = await getSystemAnalytics();\n        // Example: build fake hourly trend from reports count\n        const labels = Array.from({\n          length: 24\n        }, (_, i) => `${i}:00`);\n        const reports = labels.map((_, i) => Math.floor(data.total_reports / 24 * (Math.random() + 0.5)));\n        setTrendData({\n          labels,\n          reports\n        });\n      } catch (error) {\n        console.error(\"Failed to fetch trend data\", error);\n      }\n    };\n    fetchAnalytics();\n  }, []);\n  if (!trendData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading trend chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 26\n  }, this);\n  const chartData = {\n    labels: trendData.labels,\n    datasets: [{\n      label: \"Reports (approx)\",\n      data: trendData.reports,\n      fill: false,\n      borderColor: \"#42a5f5\",\n      tension: 0.2\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(TrendChart, \"2INzswar6Wu7M4M5KK/LVodGUGM=\");\n_c = TrendChart;\nexport default TrendChart;\nvar _c;\n$RefreshReg$(_c, \"TrendChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","getSystemAnalytics","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","TrendChart","_s","trendData","setTrendData","fetchAnalytics","data","labels","Array","from","length","_","i","reports","map","Math","floor","total_reports","random","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","datasets","label","fill","borderColor","tension","_c","$RefreshReg$"],"sources":["C:/suro/Crowd_prediction/Frontend/src/components/Analytics/TreandChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { getSystemAnalytics } from \"../../services/stations\";\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst TrendChart = () => {\r\n  const [trendData, setTrendData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAnalytics = async () => {\r\n      try {\r\n        const data = await getSystemAnalytics();\r\n        // Example: build fake hourly trend from reports count\r\n        const labels = Array.from({ length: 24 }, (_, i) => `${i}:00`);\r\n        const reports = labels.map(\r\n          (_, i) => Math.floor((data.total_reports / 24) * (Math.random() + 0.5))\r\n        );\r\n        setTrendData({ labels, reports });\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch trend data\", error);\r\n      }\r\n    };\r\n    fetchAnalytics();\r\n  }, []);\r\n\r\n  if (!trendData) return <div className=\"loading\">Loading trend chart...</div>;\r\n\r\n  const chartData = {\r\n    labels: trendData.labels,\r\n    datasets: [\r\n      {\r\n        label: \"Reports (approx)\",\r\n        data: trendData.reports,\r\n        fill: false,\r\n        borderColor: \"#42a5f5\",\r\n        tension: 0.2,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Line data={chartData} />;\r\n};\r\n\r\nexport default TrendChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SACEC,KAAK,IAAIC,OAAO,EAChBC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,MAAM,QACD,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBR,OAAO,CAACS,QAAQ,CACdR,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMjB,kBAAkB,CAAC,CAAC;QACvC;QACA,MAAMkB,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK,GAAGA,CAAC,KAAK,CAAC;QAC9D,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAG,CACxB,CAACH,CAAC,EAAEC,CAAC,KAAKG,IAAI,CAACC,KAAK,CAAEV,IAAI,CAACW,aAAa,GAAG,EAAE,IAAKF,IAAI,CAACG,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CACxE,CAAC;QACDd,YAAY,CAAC;UAAEG,MAAM;UAAEM;QAAQ,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDd,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,SAAS,EAAE,oBAAOJ,OAAA;IAAKsB,SAAS,EAAC,SAAS;IAAAC,QAAA,EAAC;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE5E,MAAMC,SAAS,GAAG;IAChBpB,MAAM,EAAEJ,SAAS,CAACI,MAAM;IACxBqB,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,kBAAkB;MACzBvB,IAAI,EAAEH,SAAS,CAACU,OAAO;MACvBiB,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,oBAAOjC,OAAA,CAACX,IAAI;IAACkB,IAAI,EAAEqB;EAAU;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACxB,EAAA,CApCID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}