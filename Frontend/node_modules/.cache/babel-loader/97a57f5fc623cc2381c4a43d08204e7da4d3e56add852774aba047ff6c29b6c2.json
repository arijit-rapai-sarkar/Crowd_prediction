{"ast":null,"code":"var _jsxFileName = \"C:\\\\suro\\\\Crowd_prediction\\\\Crowd_prediction\\\\Frontend\\\\src\\\\components\\\\Analytics\\\\TrendChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport stationService from \"../../services/stations\";\nimport { CHART_COLORS } from \"../../utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst TrendChart = () => {\n  _s();\n  const [trend, setTrend] = useState(null);\n  useEffect(() => {\n    const fetchTrend = async () => {\n      try {\n        const overview = await stationService.getSystemOverview();\n        const labels = Array.from({\n          length: 24\n        }, (_, index) => `${index}:00`);\n        const base = overview.reports_last_24h || 0;\n        const reports = labels.map((_, index) => {\n          const modifier = 0.7 + 0.6 * Math.sin(index / 24 * Math.PI * 2);\n          const noise = Math.random() * 0.3;\n          return Math.round(base / 24 * (modifier + noise));\n        });\n        setTrend({\n          labels,\n          reports\n        });\n      } catch (error) {\n        console.error(\"Failed to build trend data\", error);\n      }\n    };\n    fetchTrend();\n  }, []);\n  if (!trend) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading trend data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  const data = {\n    labels: trend.labels,\n    datasets: [{\n      label: \"Estimated Reports\",\n      data: trend.reports,\n      borderColor: CHART_COLORS.accent,\n      backgroundColor: CHART_COLORS.accentBg,\n      tension: 0.35,\n      fill: true\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"320px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(TrendChart, \"6AB5zNccTljG1eWLsXJBAcKIveU=\");\n_c = TrendChart;\nexport default TrendChart;\nvar _c;\n$RefreshReg$(_c, \"TrendChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","stationService","CHART_COLORS","jsxDEV","_jsxDEV","register","TrendChart","_s","trend","setTrend","fetchTrend","overview","getSystemOverview","labels","Array","from","length","_","index","base","reports_last_24h","reports","map","modifier","Math","sin","PI","noise","random","round","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","datasets","label","borderColor","accent","backgroundColor","accentBg","tension","fill","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","style","height","_c","$RefreshReg$"],"sources":["C:/suro/Crowd_prediction/Crowd_prediction/Frontend/src/components/Analytics/TrendChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport stationService from \"../../services/stations\";\r\nimport { CHART_COLORS } from \"../../utils/constants\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst TrendChart = () => {\r\n  const [trend, setTrend] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchTrend = async () => {\r\n      try {\r\n        const overview = await stationService.getSystemOverview();\r\n        const labels = Array.from({ length: 24 }, (_, index) => `${index}:00`);\r\n        const base = overview.reports_last_24h || 0;\r\n        const reports = labels.map((_, index) => {\r\n          const modifier = 0.7 + 0.6 * Math.sin((index / 24) * Math.PI * 2);\r\n          const noise = Math.random() * 0.3;\r\n          return Math.round((base / 24) * (modifier + noise));\r\n        });\r\n        setTrend({ labels, reports });\r\n      } catch (error) {\r\n        console.error(\"Failed to build trend data\", error);\r\n      }\r\n    };\r\n\r\n    fetchTrend();\r\n  }, []);\r\n\r\n  if (!trend) {\r\n    return <div className=\"loading\">Loading trend data...</div>;\r\n  }\r\n\r\n  const data = {\r\n    labels: trend.labels,\r\n    datasets: [\r\n      {\r\n        label: \"Estimated Reports\",\r\n        data: trend.reports,\r\n        borderColor: CHART_COLORS.accent,\r\n        backgroundColor: CHART_COLORS.accentBg,\r\n        tension: 0.35,\r\n        fill: true,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: { position: \"top\" },\r\n      title: { display: false },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"320px\" }}>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendChart;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}