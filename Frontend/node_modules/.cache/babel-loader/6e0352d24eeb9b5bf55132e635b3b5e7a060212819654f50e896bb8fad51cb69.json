{"ast":null,"code":"var _jsxFileName = \"C:\\\\suro\\\\Crowd_prediction\\\\Crowd_prediction\\\\Frontend\\\\src\\\\components\\\\Analytics\\\\HeatMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from \"react-leaflet\";\nimport stationService from \"../../services/stations\";\nimport { CROWD_LEVELS, DEFAULT_MAP_CENTER } from \"../../utils/constants\";\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeatMap = () => {\n  _s();\n  const [stations, setStations] = useState([]);\n  useEffect(() => {\n    const fetchStations = async () => {\n      try {\n        const data = await stationService.getAll();\n        setStations(data);\n      } catch (error) {\n        console.error(\"Failed to fetch stations for heatmap\", error);\n      }\n    };\n    fetchStations();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: DEFAULT_MAP_CENTER,\n    zoom: 12,\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 OpenStreetMap contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), stations.map(station => {\n      const crowdLevel = station.current_crowd_level ? Math.round(station.current_crowd_level) : 3;\n      const levelInfo = CROWD_LEVELS[crowdLevel];\n      return /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: [station.latitude, station.longitude],\n        radius: 8 + crowdLevel,\n        fillOpacity: 0.6,\n        color: levelInfo.color,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -4],\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: station.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), \"Line: \", station.line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), \"Status: \", levelInfo.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, station.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(HeatMap, \"KV8CcP3gcIUxQ2C9moSCRW/KKrI=\");\n_c = HeatMap;\nexport default HeatMap;\nvar _c;\n$RefreshReg$(_c, \"HeatMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","CircleMarker","Tooltip","stationService","CROWD_LEVELS","DEFAULT_MAP_CENTER","jsxDEV","_jsxDEV","HeatMap","_s","stations","setStations","fetchStations","data","getAll","error","console","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","station","crowdLevel","current_crowd_level","Math","round","levelInfo","latitude","longitude","radius","fillOpacity","color","direction","offset","name","line","label","id","_c","$RefreshReg$"],"sources":["C:/suro/Crowd_prediction/Crowd_prediction/Frontend/src/components/Analytics/HeatMap.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, CircleMarker, Tooltip } from \"react-leaflet\";\r\nimport stationService from \"../../services/stations\";\r\nimport { CROWD_LEVELS, DEFAULT_MAP_CENTER } from \"../../utils/constants\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst HeatMap = () => {\r\n  const [stations, setStations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchStations = async () => {\r\n      try {\r\n        const data = await stationService.getAll();\r\n        setStations(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch stations for heatmap\", error);\r\n      }\r\n    };\r\n\r\n    fetchStations();\r\n  }, []);\r\n\r\n  return (\r\n    <MapContainer\r\n      center={DEFAULT_MAP_CENTER}\r\n      zoom={12}\r\n      style={{ height: \"400px\", width: \"100%\" }}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"&copy; OpenStreetMap contributors\"\r\n      />\r\n\r\n      {stations.map((station) => {\r\n        const crowdLevel = station.current_crowd_level\r\n          ? Math.round(station.current_crowd_level)\r\n          : 3;\r\n        const levelInfo = CROWD_LEVELS[crowdLevel];\r\n\r\n        return (\r\n          <CircleMarker\r\n            key={station.id}\r\n            center={[station.latitude, station.longitude]}\r\n            radius={8 + crowdLevel}\r\n            fillOpacity={0.6}\r\n            color={levelInfo.color}\r\n          >\r\n            <Tooltip direction=\"top\" offset={[0, -4]}>\r\n              <strong>{station.name}</strong>\r\n              <br />\r\n              Line: {station.line}\r\n              <br />\r\n              Status: {levelInfo.label}\r\n            </Tooltip>\r\n          </CircleMarker>\r\n        );\r\n      })}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default HeatMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}