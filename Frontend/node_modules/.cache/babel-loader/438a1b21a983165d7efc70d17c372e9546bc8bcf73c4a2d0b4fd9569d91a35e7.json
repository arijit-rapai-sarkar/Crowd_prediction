{"ast":null,"code":"var _jsxFileName = \"C:\\\\suro\\\\Crowd_prediction\\\\Frontend\\\\src\\\\components\\\\Stations\\\\StationDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getStation, getStationPredictions, getStationAnalytics } from \"../../services/stations\";\nimport CrowdReportForm from \"./CrowdReportForm\";\nimport { CROWD_COLORS, CROWD_LEVELS } from \"../../utils/constants\";\nimport { Line } from \"react-chartjs-2\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Stations.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst StationDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [station, setStation] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [analytics, setAnalytics] = useState(null);\n  const [showReportForm, setShowReportForm] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const stationData = await getStation(id);\n        const predictionData = await getStationPredictions(id);\n        const analyticsData = await getStationAnalytics(id);\n        setStation(stationData);\n        setPredictions(predictionData);\n        setAnalytics(analyticsData);\n      } catch (error) {\n        console.error(\"Failed to load station details\", error);\n      }\n    };\n    fetchData();\n  }, [id]);\n  if (!station) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading station details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 24\n  }, this);\n  const chartData = {\n    labels: predictions.map(p => new Date(p.prediction_time).toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    })),\n    datasets: [{\n      label: \"Predicted Crowd Level\",\n      data: predictions.map(p => p.predicted_crowd_level),\n      borderColor: \"#42a5f5\",\n      backgroundColor: \"rgba(66, 165, 245, 0.2)\",\n      tension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"station-detail\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: station.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Crowd Level:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: CROWD_COLORS[station.current_crowd_level || 3]\n        },\n        children: CROWD_LEVELS[station.current_crowd_level || 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"station-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"24-Hour Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"station-map\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [station.latitude, station.longitude],\n        zoom: 14,\n        style: {\n          height: \"300px\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 OpenStreetMap contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: [station.latitude, station.longitude],\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: station.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), analytics && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"station-analytics\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Analytics (7 days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Average Crowd Level: \", analytics.avg_crowd_level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Peak Hours: \", analytics.peak_hours.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowReportForm(true),\n      className: \"report-btn\",\n      children: \"Submit Crowd Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), showReportForm && /*#__PURE__*/_jsxDEV(CrowdReportForm, {\n      stationId: id,\n      onClose: () => setShowReportForm(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(StationDetail, \"qxJZYasjgILgE6o/J32DpOWQPEU=\", false, function () {\n  return [useParams];\n});\n_c = StationDetail;\nexport default StationDetail;\nvar _c;\n$RefreshReg$(_c, \"StationDetail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getStation","getStationPredictions","getStationAnalytics","CrowdReportForm","CROWD_COLORS","CROWD_LEVELS","Line","MapContainer","TileLayer","Marker","Popup","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","jsxDEV","_jsxDEV","register","StationDetail","_s","id","station","setStation","predictions","setPredictions","analytics","setAnalytics","showReportForm","setShowReportForm","fetchData","stationData","predictionData","analyticsData","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","map","p","Date","prediction_time","toLocaleTimeString","hour","minute","datasets","label","data","predicted_crowd_level","borderColor","backgroundColor","tension","name","style","color","current_crowd_level","center","latitude","longitude","zoom","height","width","url","attribution","position","avg_crowd_level","peak_hours","join","onClick","stationId","onClose","_c","$RefreshReg$"],"sources":["C:/suro/Crowd_prediction/Frontend/src/components/Stations/StationDetail.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  getStation,\r\n  getStationPredictions,\r\n  getStationAnalytics,\r\n} from \"../../services/stations\";\r\nimport CrowdReportForm from \"./CrowdReportForm\";\r\nimport { CROWD_COLORS, CROWD_LEVELS } from \"../../utils/constants\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport {\r\n  Chart as ChartJS,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./Stations.css\";\r\n\r\nChartJS.register(\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst StationDetail = () => {\r\n  const { id } = useParams();\r\n  const [station, setStation] = useState(null);\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [showReportForm, setShowReportForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const stationData = await getStation(id);\r\n        const predictionData = await getStationPredictions(id);\r\n        const analyticsData = await getStationAnalytics(id);\r\n        setStation(stationData);\r\n        setPredictions(predictionData);\r\n        setAnalytics(analyticsData);\r\n      } catch (error) {\r\n        console.error(\"Failed to load station details\", error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [id]);\r\n\r\n  if (!station) return <div className=\"loading\">Loading station details...</div>;\r\n\r\n  const chartData = {\r\n    labels: predictions.map((p) =>\r\n      new Date(p.prediction_time).toLocaleTimeString([], {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n    ),\r\n    datasets: [\r\n      {\r\n        label: \"Predicted Crowd Level\",\r\n        data: predictions.map((p) => p.predicted_crowd_level),\r\n        borderColor: \"#42a5f5\",\r\n        backgroundColor: \"rgba(66, 165, 245, 0.2)\",\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"station-detail\">\r\n      <h2>{station.name}</h2>\r\n      <p>\r\n        Current Crowd Level:{\" \"}\r\n        <span style={{ color: CROWD_COLORS[station.current_crowd_level || 3] }}>\r\n          {CROWD_LEVELS[station.current_crowd_level || 3]}\r\n        </span>\r\n      </p>\r\n\r\n      <div className=\"station-chart\">\r\n        <h3>24-Hour Predictions</h3>\r\n        <Line data={chartData} />\r\n      </div>\r\n\r\n      <div className=\"station-map\">\r\n        <h3>Location</h3>\r\n        <MapContainer\r\n          center={[station.latitude, station.longitude]}\r\n          zoom={14}\r\n          style={{ height: \"300px\", width: \"100%\" }}\r\n        >\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"© OpenStreetMap contributors\"\r\n          />\r\n          <Marker position={[station.latitude, station.longitude]}>\r\n            <Popup>{station.name}</Popup>\r\n          </Marker>\r\n        </MapContainer>\r\n      </div>\r\n\r\n      {analytics && (\r\n        <div className=\"station-analytics\">\r\n          <h3>Analytics (7 days)</h3>\r\n          <p>Average Crowd Level: {analytics.avg_crowd_level}</p>\r\n          <p>Peak Hours: {analytics.peak_hours.join(\", \")}</p>\r\n        </div>\r\n      )}\r\n\r\n      <button onClick={() => setShowReportForm(true)} className=\"report-btn\">\r\n        Submit Crowd Report\r\n      </button>\r\n\r\n      {showReportForm && (\r\n        <CrowdReportForm\r\n          stationId={id}\r\n          onClose={() => setShowReportForm(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationDetail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}